//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace CrossJournal.UI.UWP
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
    private global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlTypeInfoProvider _provider;

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[47];
            _typeNameTable[0] = "MvvmCross.WindowsUWP.Views.MvxWindowsPage";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[2] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[3] = "MvvmCross.WindowsUWP.Views.IMvxWindowsFrame";
            _typeNameTable[4] = "MvvmCross.Core.ViewModels.IMvxViewModel";
            _typeNameTable[5] = "CrossJournal.UI.UWP.Views.AddNewNotePageView";
            _typeNameTable[6] = "CrossJournal.UI.UWP.Views.DetailsPageView";
            _typeNameTable[7] = "CrossJournal.Core.ViewModels.DetailsPageViewModel";
            _typeNameTable[8] = "CrossJournal.Core.ViewModels.BaseViewModel";
            _typeNameTable[9] = "MvvmCross.Core.ViewModels.MvxViewModel";
            _typeNameTable[10] = "MvvmCross.Core.ViewModels.MvxNavigatingObject";
            _typeNameTable[11] = "MvvmCross.Core.ViewModels.MvxNotifyPropertyChanged";
            _typeNameTable[12] = "MvvmCross.Platform.Core.MvxMainThreadDispatchingObject";
            _typeNameTable[13] = "Object";
            _typeNameTable[14] = "CrossJournal.UI.UWP.Views.EditPageView";
            _typeNameTable[15] = "CrossJournal.UI.UWP.Converters.MultilineToSingleUWP";
            _typeNameTable[16] = "MvvmCross.Platform.WindowsCommon.Converters.MvxNativeValueConverter`1<CrossJournal.Core.Converters.MultilineToSingle>";
            _typeNameTable[17] = "MvvmCross.Platform.WindowsCommon.Converters.MvxNativeValueConverter";
            _typeNameTable[18] = "CrossJournal.UI.UWP.Converters.TimeSpanToHumanStringUWP";
            _typeNameTable[19] = "MvvmCross.Platform.WindowsCommon.Converters.MvxNativeValueConverter`1<CrossJournal.Core.Converters.TimeSpanToHumanStringConverter>";
            _typeNameTable[20] = "Windows.UI.Interactivity.Interaction";
            _typeNameTable[21] = "Windows.UI.Interactivity.TriggerCollection";
            _typeNameTable[22] = "Windows.UI.Interactivity.LoadableAttachableCollection`1<Windows.UI.Interactivity.TriggerBase>";
            _typeNameTable[23] = "Windows.UI.Interactivity.AttachableCollection`1<Windows.UI.Interactivity.TriggerBase>";
            _typeNameTable[24] = "Windows.UI.Interactivity.FrameworkElementCollection`1<Windows.UI.Interactivity.TriggerBase>";
            _typeNameTable[25] = "Windows.UI.Xaml.FrameworkElement";
            _typeNameTable[26] = "Windows.UI.Interactivity.TriggerBase";
            _typeNameTable[27] = "Windows.UI.Interactivity.InteractivityBase";
            _typeNameTable[28] = "Windows.UI.Interactivity.TriggerActionCollection";
            _typeNameTable[29] = "Windows.UI.Interactivity.AttachableCollection`1<Windows.UI.Interactivity.TriggerAction>";
            _typeNameTable[30] = "Windows.UI.Interactivity.FrameworkElementCollection`1<Windows.UI.Interactivity.TriggerAction>";
            _typeNameTable[31] = "Windows.UI.Interactivity.TriggerAction";
            _typeNameTable[32] = "Boolean";
            _typeNameTable[33] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[34] = "Windows.UI.Interactivity.BehaviorCollection";
            _typeNameTable[35] = "Windows.UI.Interactivity.LoadableAttachableCollection`1<Windows.UI.Interactivity.Behavior>";
            _typeNameTable[36] = "Windows.UI.Interactivity.AttachableCollection`1<Windows.UI.Interactivity.Behavior>";
            _typeNameTable[37] = "Windows.UI.Interactivity.FrameworkElementCollection`1<Windows.UI.Interactivity.Behavior>";
            _typeNameTable[38] = "Windows.UI.Interactivity.Behavior";
            _typeNameTable[39] = "Windows.UI.Interactivity.EventTrigger";
            _typeNameTable[40] = "Windows.UI.Interactivity.EventTriggerBase`1<Object>";
            _typeNameTable[41] = "Windows.UI.Interactivity.EventTriggerBase";
            _typeNameTable[42] = "String";
            _typeNameTable[43] = "Windows.UI.Interactivity.InvokeCommandAction";
            _typeNameTable[44] = "Windows.UI.Interactivity.TriggerAction`1<Windows.UI.Xaml.FrameworkElement>";
            _typeNameTable[45] = "System.Windows.Input.ICommand";
            _typeNameTable[46] = "CrossJournal.UI.UWP.Views.MainPageView";

            _typeTable = new global::System.Type[47];
            _typeTable[0] = typeof(global::MvvmCross.WindowsUWP.Views.MvxWindowsPage);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[2] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[3] = typeof(global::MvvmCross.WindowsUWP.Views.IMvxWindowsFrame);
            _typeTable[4] = typeof(global::MvvmCross.Core.ViewModels.IMvxViewModel);
            _typeTable[5] = typeof(global::CrossJournal.UI.UWP.Views.AddNewNotePageView);
            _typeTable[6] = typeof(global::CrossJournal.UI.UWP.Views.DetailsPageView);
            _typeTable[7] = typeof(global::CrossJournal.Core.ViewModels.DetailsPageViewModel);
            _typeTable[8] = typeof(global::CrossJournal.Core.ViewModels.BaseViewModel);
            _typeTable[9] = typeof(global::MvvmCross.Core.ViewModels.MvxViewModel);
            _typeTable[10] = typeof(global::MvvmCross.Core.ViewModels.MvxNavigatingObject);
            _typeTable[11] = typeof(global::MvvmCross.Core.ViewModels.MvxNotifyPropertyChanged);
            _typeTable[12] = typeof(global::MvvmCross.Platform.Core.MvxMainThreadDispatchingObject);
            _typeTable[13] = typeof(global::System.Object);
            _typeTable[14] = typeof(global::CrossJournal.UI.UWP.Views.EditPageView);
            _typeTable[15] = typeof(global::CrossJournal.UI.UWP.Converters.MultilineToSingleUWP);
            _typeTable[16] = typeof(global::MvvmCross.Platform.WindowsCommon.Converters.MvxNativeValueConverter<global::CrossJournal.Core.Converters.MultilineToSingle>);
            _typeTable[17] = typeof(global::MvvmCross.Platform.WindowsCommon.Converters.MvxNativeValueConverter);
            _typeTable[18] = typeof(global::CrossJournal.UI.UWP.Converters.TimeSpanToHumanStringUWP);
            _typeTable[19] = typeof(global::MvvmCross.Platform.WindowsCommon.Converters.MvxNativeValueConverter<global::CrossJournal.Core.Converters.TimeSpanToHumanStringConverter>);
            _typeTable[20] = typeof(global::Windows.UI.Interactivity.Interaction);
            _typeTable[21] = typeof(global::Windows.UI.Interactivity.TriggerCollection);
            _typeTable[22] = typeof(global::Windows.UI.Interactivity.LoadableAttachableCollection<global::Windows.UI.Interactivity.TriggerBase>);
            _typeTable[23] = typeof(global::Windows.UI.Interactivity.AttachableCollection<global::Windows.UI.Interactivity.TriggerBase>);
            _typeTable[24] = typeof(global::Windows.UI.Interactivity.FrameworkElementCollection<global::Windows.UI.Interactivity.TriggerBase>);
            _typeTable[25] = typeof(global::Windows.UI.Xaml.FrameworkElement);
            _typeTable[26] = typeof(global::Windows.UI.Interactivity.TriggerBase);
            _typeTable[27] = typeof(global::Windows.UI.Interactivity.InteractivityBase);
            _typeTable[28] = typeof(global::Windows.UI.Interactivity.TriggerActionCollection);
            _typeTable[29] = typeof(global::Windows.UI.Interactivity.AttachableCollection<global::Windows.UI.Interactivity.TriggerAction>);
            _typeTable[30] = typeof(global::Windows.UI.Interactivity.FrameworkElementCollection<global::Windows.UI.Interactivity.TriggerAction>);
            _typeTable[31] = typeof(global::Windows.UI.Interactivity.TriggerAction);
            _typeTable[32] = typeof(global::System.Boolean);
            _typeTable[33] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[34] = typeof(global::Windows.UI.Interactivity.BehaviorCollection);
            _typeTable[35] = typeof(global::Windows.UI.Interactivity.LoadableAttachableCollection<global::Windows.UI.Interactivity.Behavior>);
            _typeTable[36] = typeof(global::Windows.UI.Interactivity.AttachableCollection<global::Windows.UI.Interactivity.Behavior>);
            _typeTable[37] = typeof(global::Windows.UI.Interactivity.FrameworkElementCollection<global::Windows.UI.Interactivity.Behavior>);
            _typeTable[38] = typeof(global::Windows.UI.Interactivity.Behavior);
            _typeTable[39] = typeof(global::Windows.UI.Interactivity.EventTrigger);
            _typeTable[40] = typeof(global::Windows.UI.Interactivity.EventTriggerBase<global::System.Object>);
            _typeTable[41] = typeof(global::Windows.UI.Interactivity.EventTriggerBase);
            _typeTable[42] = typeof(global::System.String);
            _typeTable[43] = typeof(global::Windows.UI.Interactivity.InvokeCommandAction);
            _typeTable[44] = typeof(global::Windows.UI.Interactivity.TriggerAction<global::Windows.UI.Xaml.FrameworkElement>);
            _typeTable[45] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[46] = typeof(global::CrossJournal.UI.UWP.Views.MainPageView);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_MvxWindowsPage() { return new global::MvvmCross.WindowsUWP.Views.MvxWindowsPage(); }
        private object Activate_5_AddNewNotePageView() { return new global::CrossJournal.UI.UWP.Views.AddNewNotePageView(); }
        private object Activate_6_DetailsPageView() { return new global::CrossJournal.UI.UWP.Views.DetailsPageView(); }
        private object Activate_14_EditPageView() { return new global::CrossJournal.UI.UWP.Views.EditPageView(); }
        private object Activate_15_MultilineToSingleUWP() { return new global::CrossJournal.UI.UWP.Converters.MultilineToSingleUWP(); }
        private object Activate_16_MvxNativeValueConverter() { return new global::MvvmCross.Platform.WindowsCommon.Converters.MvxNativeValueConverter<global::CrossJournal.Core.Converters.MultilineToSingle>(); }
        private object Activate_18_TimeSpanToHumanStringUWP() { return new global::CrossJournal.UI.UWP.Converters.TimeSpanToHumanStringUWP(); }
        private object Activate_19_MvxNativeValueConverter() { return new global::MvvmCross.Platform.WindowsCommon.Converters.MvxNativeValueConverter<global::CrossJournal.Core.Converters.TimeSpanToHumanStringConverter>(); }
        private object Activate_24_FrameworkElementCollection() { return new global::Windows.UI.Interactivity.FrameworkElementCollection<global::Windows.UI.Interactivity.TriggerBase>(); }
        private object Activate_30_FrameworkElementCollection() { return new global::Windows.UI.Interactivity.FrameworkElementCollection<global::Windows.UI.Interactivity.TriggerAction>(); }
        private object Activate_37_FrameworkElementCollection() { return new global::Windows.UI.Interactivity.FrameworkElementCollection<global::Windows.UI.Interactivity.Behavior>(); }
        private object Activate_39_EventTrigger() { return new global::Windows.UI.Interactivity.EventTrigger(); }
        private object Activate_43_InvokeCommandAction() { return new global::Windows.UI.Interactivity.InvokeCommandAction(); }
        private object Activate_46_MainPageView() { return new global::CrossJournal.UI.UWP.Views.MainPageView(); }
        private void VectorAdd_21_TriggerCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Interactivity.TriggerBase>)instance;
            var newItem = (global::Windows.UI.Interactivity.TriggerBase)item;
            collection.Add(newItem);
        }
        private void VectorAdd_22_LoadableAttachableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Interactivity.TriggerBase>)instance;
            var newItem = (global::Windows.UI.Interactivity.TriggerBase)item;
            collection.Add(newItem);
        }
        private void VectorAdd_23_AttachableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Interactivity.TriggerBase>)instance;
            var newItem = (global::Windows.UI.Interactivity.TriggerBase)item;
            collection.Add(newItem);
        }
        private void VectorAdd_24_FrameworkElementCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Interactivity.TriggerBase>)instance;
            var newItem = (global::Windows.UI.Interactivity.TriggerBase)item;
            collection.Add(newItem);
        }
        private void VectorAdd_28_TriggerActionCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Interactivity.TriggerAction>)instance;
            var newItem = (global::Windows.UI.Interactivity.TriggerAction)item;
            collection.Add(newItem);
        }
        private void VectorAdd_29_AttachableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Interactivity.TriggerAction>)instance;
            var newItem = (global::Windows.UI.Interactivity.TriggerAction)item;
            collection.Add(newItem);
        }
        private void VectorAdd_30_FrameworkElementCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Interactivity.TriggerAction>)instance;
            var newItem = (global::Windows.UI.Interactivity.TriggerAction)item;
            collection.Add(newItem);
        }
        private void VectorAdd_34_BehaviorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Interactivity.Behavior>)instance;
            var newItem = (global::Windows.UI.Interactivity.Behavior)item;
            collection.Add(newItem);
        }
        private void VectorAdd_35_LoadableAttachableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Interactivity.Behavior>)instance;
            var newItem = (global::Windows.UI.Interactivity.Behavior)item;
            collection.Add(newItem);
        }
        private void VectorAdd_36_AttachableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Interactivity.Behavior>)instance;
            var newItem = (global::Windows.UI.Interactivity.Behavior)item;
            collection.Add(newItem);
        }
        private void VectorAdd_37_FrameworkElementCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Interactivity.Behavior>)instance;
            var newItem = (global::Windows.UI.Interactivity.Behavior)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  MvvmCross.WindowsUWP.Views.MvxWindowsPage
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_0_MvxWindowsPage;
                userType.AddMemberName("WrappedFrame");
                userType.AddMemberName("ViewModel");
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  MvvmCross.WindowsUWP.Views.IMvxWindowsFrame
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 4:   //  MvvmCross.Core.ViewModels.IMvxViewModel
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 5:   //  CrossJournal.UI.UWP.Views.AddNewNotePageView
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MvvmCross.WindowsUWP.Views.MvxWindowsPage"));
                userType.Activator = Activate_5_AddNewNotePageView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 6:   //  CrossJournal.UI.UWP.Views.DetailsPageView
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MvvmCross.WindowsUWP.Views.MvxWindowsPage"));
                userType.Activator = Activate_6_DetailsPageView;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 7:   //  CrossJournal.Core.ViewModels.DetailsPageViewModel
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CrossJournal.Core.ViewModels.BaseViewModel"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 8:   //  CrossJournal.Core.ViewModels.BaseViewModel
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MvvmCross.Core.ViewModels.MvxViewModel"));
                xamlType = userType;
                break;

            case 9:   //  MvvmCross.Core.ViewModels.MvxViewModel
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MvvmCross.Core.ViewModels.MvxNavigatingObject"));
                xamlType = userType;
                break;

            case 10:   //  MvvmCross.Core.ViewModels.MvxNavigatingObject
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MvvmCross.Core.ViewModels.MvxNotifyPropertyChanged"));
                xamlType = userType;
                break;

            case 11:   //  MvvmCross.Core.ViewModels.MvxNotifyPropertyChanged
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MvvmCross.Platform.Core.MvxMainThreadDispatchingObject"));
                xamlType = userType;
                break;

            case 12:   //  MvvmCross.Platform.Core.MvxMainThreadDispatchingObject
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 13:   //  Object
                xamlType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 14:   //  CrossJournal.UI.UWP.Views.EditPageView
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MvvmCross.WindowsUWP.Views.MvxWindowsPage"));
                userType.Activator = Activate_14_EditPageView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 15:   //  CrossJournal.UI.UWP.Converters.MultilineToSingleUWP
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MvvmCross.Platform.WindowsCommon.Converters.MvxNativeValueConverter`1<CrossJournal.Core.Converters.MultilineToSingle>"));
                userType.Activator = Activate_15_MultilineToSingleUWP;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 16:   //  MvvmCross.Platform.WindowsCommon.Converters.MvxNativeValueConverter`1<CrossJournal.Core.Converters.MultilineToSingle>
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MvvmCross.Platform.WindowsCommon.Converters.MvxNativeValueConverter"));
                userType.Activator = Activate_16_MvxNativeValueConverter;
                xamlType = userType;
                break;

            case 17:   //  MvvmCross.Platform.WindowsCommon.Converters.MvxNativeValueConverter
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 18:   //  CrossJournal.UI.UWP.Converters.TimeSpanToHumanStringUWP
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MvvmCross.Platform.WindowsCommon.Converters.MvxNativeValueConverter`1<CrossJournal.Core.Converters.TimeSpanToHumanStringConverter>"));
                userType.Activator = Activate_18_TimeSpanToHumanStringUWP;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 19:   //  MvvmCross.Platform.WindowsCommon.Converters.MvxNativeValueConverter`1<CrossJournal.Core.Converters.TimeSpanToHumanStringConverter>
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MvvmCross.Platform.WindowsCommon.Converters.MvxNativeValueConverter"));
                userType.Activator = Activate_19_MvxNativeValueConverter;
                xamlType = userType;
                break;

            case 20:   //  Windows.UI.Interactivity.Interaction
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Triggers");
                userType.AddMemberName("Behaviors");
                xamlType = userType;
                break;

            case 21:   //  Windows.UI.Interactivity.TriggerCollection
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Interactivity.LoadableAttachableCollection`1<Windows.UI.Interactivity.TriggerBase>"));
                userType.CollectionAdd = VectorAdd_21_TriggerCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 22:   //  Windows.UI.Interactivity.LoadableAttachableCollection`1<Windows.UI.Interactivity.TriggerBase>
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Interactivity.AttachableCollection`1<Windows.UI.Interactivity.TriggerBase>"));
                userType.CollectionAdd = VectorAdd_22_LoadableAttachableCollection;
                xamlType = userType;
                break;

            case 23:   //  Windows.UI.Interactivity.AttachableCollection`1<Windows.UI.Interactivity.TriggerBase>
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Interactivity.FrameworkElementCollection`1<Windows.UI.Interactivity.TriggerBase>"));
                userType.CollectionAdd = VectorAdd_23_AttachableCollection;
                xamlType = userType;
                break;

            case 24:   //  Windows.UI.Interactivity.FrameworkElementCollection`1<Windows.UI.Interactivity.TriggerBase>
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.FrameworkElement"));
                userType.Activator = Activate_24_FrameworkElementCollection;
                userType.CollectionAdd = VectorAdd_24_FrameworkElementCollection;
                xamlType = userType;
                break;

            case 25:   //  Windows.UI.Xaml.FrameworkElement
                xamlType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 26:   //  Windows.UI.Interactivity.TriggerBase
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Interactivity.InteractivityBase"));
                userType.SetContentPropertyName("Windows.UI.Interactivity.TriggerBase.Actions");
                userType.AddMemberName("Actions");
                xamlType = userType;
                break;

            case 27:   //  Windows.UI.Interactivity.InteractivityBase
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.FrameworkElement"));
                xamlType = userType;
                break;

            case 28:   //  Windows.UI.Interactivity.TriggerActionCollection
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Interactivity.AttachableCollection`1<Windows.UI.Interactivity.TriggerAction>"));
                userType.CollectionAdd = VectorAdd_28_TriggerActionCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 29:   //  Windows.UI.Interactivity.AttachableCollection`1<Windows.UI.Interactivity.TriggerAction>
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Interactivity.FrameworkElementCollection`1<Windows.UI.Interactivity.TriggerAction>"));
                userType.CollectionAdd = VectorAdd_29_AttachableCollection;
                xamlType = userType;
                break;

            case 30:   //  Windows.UI.Interactivity.FrameworkElementCollection`1<Windows.UI.Interactivity.TriggerAction>
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.FrameworkElement"));
                userType.Activator = Activate_30_FrameworkElementCollection;
                userType.CollectionAdd = VectorAdd_30_FrameworkElementCollection;
                xamlType = userType;
                break;

            case 31:   //  Windows.UI.Interactivity.TriggerAction
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Interactivity.InteractivityBase"));
                userType.AddMemberName("IsEnabled");
                xamlType = userType;
                break;

            case 32:   //  Boolean
                xamlType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 33:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 34:   //  Windows.UI.Interactivity.BehaviorCollection
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Interactivity.LoadableAttachableCollection`1<Windows.UI.Interactivity.Behavior>"));
                userType.CollectionAdd = VectorAdd_34_BehaviorCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 35:   //  Windows.UI.Interactivity.LoadableAttachableCollection`1<Windows.UI.Interactivity.Behavior>
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Interactivity.AttachableCollection`1<Windows.UI.Interactivity.Behavior>"));
                userType.CollectionAdd = VectorAdd_35_LoadableAttachableCollection;
                xamlType = userType;
                break;

            case 36:   //  Windows.UI.Interactivity.AttachableCollection`1<Windows.UI.Interactivity.Behavior>
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Interactivity.FrameworkElementCollection`1<Windows.UI.Interactivity.Behavior>"));
                userType.CollectionAdd = VectorAdd_36_AttachableCollection;
                xamlType = userType;
                break;

            case 37:   //  Windows.UI.Interactivity.FrameworkElementCollection`1<Windows.UI.Interactivity.Behavior>
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.FrameworkElement"));
                userType.Activator = Activate_37_FrameworkElementCollection;
                userType.CollectionAdd = VectorAdd_37_FrameworkElementCollection;
                xamlType = userType;
                break;

            case 38:   //  Windows.UI.Interactivity.Behavior
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Interactivity.InteractivityBase"));
                xamlType = userType;
                break;

            case 39:   //  Windows.UI.Interactivity.EventTrigger
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Interactivity.EventTriggerBase`1<Object>"));
                userType.Activator = Activate_39_EventTrigger;
                userType.SetContentPropertyName("Windows.UI.Interactivity.TriggerBase.Actions");
                userType.AddMemberName("EventName");
                xamlType = userType;
                break;

            case 40:   //  Windows.UI.Interactivity.EventTriggerBase`1<Object>
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Interactivity.EventTriggerBase"));
                userType.SetContentPropertyName("Windows.UI.Interactivity.TriggerBase.Actions");
                userType.AddMemberName("Source");
                xamlType = userType;
                break;

            case 41:   //  Windows.UI.Interactivity.EventTriggerBase
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Interactivity.TriggerBase"));
                userType.SetContentPropertyName("Windows.UI.Interactivity.TriggerBase.Actions");
                userType.AddMemberName("SourceObject");
                userType.AddMemberName("SourceName");
                xamlType = userType;
                break;

            case 42:   //  String
                xamlType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 43:   //  Windows.UI.Interactivity.InvokeCommandAction
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Interactivity.TriggerAction`1<Windows.UI.Xaml.FrameworkElement>"));
                userType.Activator = Activate_43_InvokeCommandAction;
                userType.AddMemberName("Command");
                userType.AddMemberName("CommandName");
                userType.AddMemberName("CommandParameter");
                xamlType = userType;
                break;

            case 44:   //  Windows.UI.Interactivity.TriggerAction`1<Windows.UI.Xaml.FrameworkElement>
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Interactivity.TriggerAction"));
                xamlType = userType;
                break;

            case 45:   //  System.Windows.Input.ICommand
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 46:   //  CrossJournal.UI.UWP.Views.MainPageView
                userType = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MvvmCross.WindowsUWP.Views.MvxWindowsPage"));
                userType.Activator = Activate_46_MainPageView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }


        private object get_0_MvxWindowsPage_WrappedFrame(object instance)
        {
            var that = (global::MvvmCross.WindowsUWP.Views.MvxWindowsPage)instance;
            return that.WrappedFrame;
        }
        private object get_1_MvxWindowsPage_ViewModel(object instance)
        {
            var that = (global::MvvmCross.WindowsUWP.Views.MvxWindowsPage)instance;
            return that.ViewModel;
        }
        private void set_1_MvxWindowsPage_ViewModel(object instance, object Value)
        {
            var that = (global::MvvmCross.WindowsUWP.Views.MvxWindowsPage)instance;
            that.ViewModel = (global::MvvmCross.Core.ViewModels.IMvxViewModel)Value;
        }
        private object get_2_DetailsPageView_ViewModel(object instance)
        {
            var that = (global::CrossJournal.UI.UWP.Views.DetailsPageView)instance;
            return that.ViewModel;
        }
        private void set_2_DetailsPageView_ViewModel(object instance, object Value)
        {
            var that = (global::CrossJournal.UI.UWP.Views.DetailsPageView)instance;
            that.ViewModel = (global::CrossJournal.Core.ViewModels.DetailsPageViewModel)Value;
        }
        private object get_3_Interaction_Triggers(object instance)
        {
            return global::Windows.UI.Interactivity.Interaction.GetTriggers((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private object get_4_TriggerBase_Actions(object instance)
        {
            var that = (global::Windows.UI.Interactivity.TriggerBase)instance;
            return that.Actions;
        }
        private object get_5_TriggerAction_IsEnabled(object instance)
        {
            var that = (global::Windows.UI.Interactivity.TriggerAction)instance;
            return that.IsEnabled;
        }
        private void set_5_TriggerAction_IsEnabled(object instance, object Value)
        {
            var that = (global::Windows.UI.Interactivity.TriggerAction)instance;
            that.IsEnabled = (global::System.Boolean)Value;
        }
        private object get_6_Interaction_Behaviors(object instance)
        {
            return global::Windows.UI.Interactivity.Interaction.GetBehaviors((global::Windows.UI.Xaml.FrameworkElement)instance);
        }
        private object get_7_EventTrigger_EventName(object instance)
        {
            var that = (global::Windows.UI.Interactivity.EventTrigger)instance;
            return that.EventName;
        }
        private void set_7_EventTrigger_EventName(object instance, object Value)
        {
            var that = (global::Windows.UI.Interactivity.EventTrigger)instance;
            that.EventName = (global::System.String)Value;
        }
        private object get_8_EventTriggerBase_Source(object instance)
        {
            var that = (global::Windows.UI.Interactivity.EventTriggerBase<global::System.Object>)instance;
            return that.Source;
        }
        private object get_9_EventTriggerBase_SourceObject(object instance)
        {
            var that = (global::Windows.UI.Interactivity.EventTriggerBase)instance;
            return that.SourceObject;
        }
        private void set_9_EventTriggerBase_SourceObject(object instance, object Value)
        {
            var that = (global::Windows.UI.Interactivity.EventTriggerBase)instance;
            that.SourceObject = (global::System.Object)Value;
        }
        private object get_10_EventTriggerBase_SourceName(object instance)
        {
            var that = (global::Windows.UI.Interactivity.EventTriggerBase)instance;
            return that.SourceName;
        }
        private void set_10_EventTriggerBase_SourceName(object instance, object Value)
        {
            var that = (global::Windows.UI.Interactivity.EventTriggerBase)instance;
            that.SourceName = (global::System.String)Value;
        }
        private object get_11_InvokeCommandAction_Command(object instance)
        {
            var that = (global::Windows.UI.Interactivity.InvokeCommandAction)instance;
            return that.Command;
        }
        private void set_11_InvokeCommandAction_Command(object instance, object Value)
        {
            var that = (global::Windows.UI.Interactivity.InvokeCommandAction)instance;
            that.Command = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_12_InvokeCommandAction_CommandName(object instance)
        {
            var that = (global::Windows.UI.Interactivity.InvokeCommandAction)instance;
            return that.CommandName;
        }
        private void set_12_InvokeCommandAction_CommandName(object instance, object Value)
        {
            var that = (global::Windows.UI.Interactivity.InvokeCommandAction)instance;
            that.CommandName = (global::System.String)Value;
        }
        private object get_13_InvokeCommandAction_CommandParameter(object instance)
        {
            var that = (global::Windows.UI.Interactivity.InvokeCommandAction)instance;
            return that.CommandParameter;
        }
        private void set_13_InvokeCommandAction_CommandParameter(object instance, object Value)
        {
            var that = (global::Windows.UI.Interactivity.InvokeCommandAction)instance;
            that.CommandParameter = (global::System.Object)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlMember xamlMember = null;
            global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "MvvmCross.WindowsUWP.Views.MvxWindowsPage.WrappedFrame":
                userType = (global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MvvmCross.WindowsUWP.Views.MvxWindowsPage");
                xamlMember = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlMember(this, "WrappedFrame", "MvvmCross.WindowsUWP.Views.IMvxWindowsFrame");
                xamlMember.Getter = get_0_MvxWindowsPage_WrappedFrame;
                xamlMember.SetIsReadOnly();
                break;
            case "MvvmCross.WindowsUWP.Views.MvxWindowsPage.ViewModel":
                userType = (global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MvvmCross.WindowsUWP.Views.MvxWindowsPage");
                xamlMember = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlMember(this, "ViewModel", "MvvmCross.Core.ViewModels.IMvxViewModel");
                xamlMember.Getter = get_1_MvxWindowsPage_ViewModel;
                xamlMember.Setter = set_1_MvxWindowsPage_ViewModel;
                break;
            case "CrossJournal.UI.UWP.Views.DetailsPageView.ViewModel":
                userType = (global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CrossJournal.UI.UWP.Views.DetailsPageView");
                xamlMember = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlMember(this, "ViewModel", "CrossJournal.Core.ViewModels.DetailsPageViewModel");
                xamlMember.Getter = get_2_DetailsPageView_ViewModel;
                xamlMember.Setter = set_2_DetailsPageView_ViewModel;
                break;
            case "Windows.UI.Interactivity.Interaction.Triggers":
                userType = (global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Interactivity.Interaction");
                xamlMember = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlMember(this, "Triggers", "Windows.UI.Interactivity.TriggerCollection");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_3_Interaction_Triggers;
                xamlMember.SetIsReadOnly();
                break;
            case "Windows.UI.Interactivity.TriggerBase.Actions":
                userType = (global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Interactivity.TriggerBase");
                xamlMember = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlMember(this, "Actions", "Windows.UI.Interactivity.TriggerActionCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_TriggerBase_Actions;
                xamlMember.SetIsReadOnly();
                break;
            case "Windows.UI.Interactivity.TriggerAction.IsEnabled":
                userType = (global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Interactivity.TriggerAction");
                xamlMember = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlMember(this, "IsEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_TriggerAction_IsEnabled;
                xamlMember.Setter = set_5_TriggerAction_IsEnabled;
                break;
            case "Windows.UI.Interactivity.Interaction.Behaviors":
                userType = (global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Interactivity.Interaction");
                xamlMember = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlMember(this, "Behaviors", "Windows.UI.Interactivity.BehaviorCollection");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.FrameworkElement");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_6_Interaction_Behaviors;
                xamlMember.SetIsReadOnly();
                break;
            case "Windows.UI.Interactivity.EventTrigger.EventName":
                userType = (global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Interactivity.EventTrigger");
                xamlMember = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlMember(this, "EventName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_EventTrigger_EventName;
                xamlMember.Setter = set_7_EventTrigger_EventName;
                break;
            case "Windows.UI.Interactivity.EventTriggerBase`1<Object>.Source":
                userType = (global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Interactivity.EventTriggerBase`1<Object>");
                xamlMember = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlMember(this, "Source", "Object");
                xamlMember.Getter = get_8_EventTriggerBase_Source;
                xamlMember.SetIsReadOnly();
                break;
            case "Windows.UI.Interactivity.EventTriggerBase.SourceObject":
                userType = (global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Interactivity.EventTriggerBase");
                xamlMember = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlMember(this, "SourceObject", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_EventTriggerBase_SourceObject;
                xamlMember.Setter = set_9_EventTriggerBase_SourceObject;
                break;
            case "Windows.UI.Interactivity.EventTriggerBase.SourceName":
                userType = (global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Interactivity.EventTriggerBase");
                xamlMember = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlMember(this, "SourceName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_EventTriggerBase_SourceName;
                xamlMember.Setter = set_10_EventTriggerBase_SourceName;
                break;
            case "Windows.UI.Interactivity.InvokeCommandAction.Command":
                userType = (global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Interactivity.InvokeCommandAction");
                xamlMember = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlMember(this, "Command", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_InvokeCommandAction_Command;
                xamlMember.Setter = set_11_InvokeCommandAction_Command;
                break;
            case "Windows.UI.Interactivity.InvokeCommandAction.CommandName":
                userType = (global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Interactivity.InvokeCommandAction");
                xamlMember = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlMember(this, "CommandName", "String");
                xamlMember.Getter = get_12_InvokeCommandAction_CommandName;
                xamlMember.Setter = set_12_InvokeCommandAction_CommandName;
                break;
            case "Windows.UI.Interactivity.InvokeCommandAction.CommandParameter":
                userType = (global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Interactivity.InvokeCommandAction");
                xamlMember = new global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlMember(this, "CommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_InvokeCommandAction_CommandParameter;
                xamlMember.Setter = set_13_InvokeCommandAction_CommandParameter;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlSystemBaseType
    {
        global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::CrossJournal.UI.UWP.CrossJournal_UI_UWP_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

